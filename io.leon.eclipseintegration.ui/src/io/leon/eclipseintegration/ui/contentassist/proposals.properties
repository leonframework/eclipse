install(module)=install(${moduleClass});Leon;Installs additional Leon modules.\n\n<b>Arguments:</b> module (Module) - The module to install. (e.g. new Packages.io.leon.persistence.mongo.LeonMongoModule())
setBaseDir(baseDir)=setBaseDir(${baseDir});Sets the base directory of the application. All relative locations are relative to this directory.\n\n<b>Arguments:</b> baseDir (string) - Default value is the location of the configuration file.
addLocation(path)=addLocation(${path});Leon;Adds a directory where Leon should lookup resources.\n\n<b>Arguments:</b> path (string) - Relative paths are relative to the base directory.
exposeUrl(regex)=exposeUrl(${regex});Leon;Exposes paths that match the given regular expression to clients.\nBy default, Leon gives client access to the following paths/files: *.html, *.png, *.jpg, *.gif, *.css, favicon.ico, */browser/*.js, */browser/*.json. To allow access on other paths or files to clients, you have to expose them by calling this function.\n\n<b>Arguments:</b> regex (string) - Regular expression to match.
loadFile(fileName)=loadFile(${fileName});Leon;Loads JavaScript files in the server environment.\n\n<b>Arguments:</b> fileName (string) - A server-side JavaScript file to load. The path must be relative to a registered location or to the application\u2019s classpath.
browser(browserName)=browser(${browserName});Leon;Makes a server-side object accessible by clients via AJAX.\n\n<b>Arguments:</b> browserName (string) - Name of the client-side variable.\n\n Afterwards call <code>linksToServer(serverName)</code>, <code>linksToServer(clazz)</code> or <code>linksToServer()</code>
server(serverName)=server(${serverName});Leon
linksToServer(serverName)=linksToServer(${serverName});Leon;Call the Method on <code>browser(browserName)</code> to complete the statement.\n\n<b>Arguments:</b> serverName (string) - Variable name of the server-side object. If not given, serverName is the same as browser name.
linksToServer(clazz)=linksToServer(${clazz});Leon;Call the Method on <code>browser(browserName)</code> to complete the statement.\n\n<b>Arguments:</b> clazz (Class) - Java class on the server-side.
linksToServer()=linksToServer();Leon;Call the Method on <code>browser(browserName)</code> to complete the statement.\n\n<b>Arguments:</b> serverName (string) - Variable name of the server-side object. If not given, serverName is the same as browser name.
linksToAllPages(serverName)=linksToAllPages(${serverName});Leon
bind(clazz)=bind(${clazz});Leon;Registers a binding in google guice. See Google Guice Binder (http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/Binder.html) for more information about how to use bindings.\n\n<b>Arguments:</b> clazz (Class) - The Java class to bind.
bind(key)=bind(${key});Leon;Registers a binding in google guice. See Google Guice Binder (http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/Binder.html) for more information about how to use bindings.\n\n<b>Arguments:</b> key (string)
bind(typeLiteral)=bind(${typeLiteral});Leon;Registers a binding in google guice. See Google Guice Binder (http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/Binder.html) for more information about how to use bindings.\n\n<b>Arguments:</b> typeLiteral